/** @file set_resource_value-cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef SET_RESOURCE_VALUE_CMDLINE_H
#define SET_RESOURCE_VALUE_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef SET_RESOURCE_VALUE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define SET_RESOURCE_VALUE_PARSER_PACKAGE "set_resource_value"
#endif

#ifndef SET_RESOURCE_VALUE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define SET_RESOURCE_VALUE_PARSER_PACKAGE_NAME "set_resource_value"
#endif

#ifndef SET_RESOURCE_VALUE_PARSER_VERSION
/** @brief the program version */
#define SET_RESOURCE_VALUE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct set_resource_value_args
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  int objectID_arg;	/**< @brief Object ID.  */
  char * objectID_orig;	/**< @brief Object ID original value given at command line.  */
  const char *objectID_help; /**< @brief Object ID help description.  */
  int objectInstanceID_arg;	/**< @brief Object Instance ID.  */
  char * objectInstanceID_orig;	/**< @brief Object Instance ID original value given at command line.  */
  const char *objectInstanceID_help; /**< @brief Object Instance ID help description.  */
  int resourceID_arg;	/**< @brief Resource ID.  */
  char * resourceID_orig;	/**< @brief Resource ID original value given at command line.  */
  const char *resourceID_help; /**< @brief Resource ID help description.  */
  int resourceInstanceID_arg;	/**< @brief Resource Instance ID.  */
  char * resourceInstanceID_orig;	/**< @brief Resource Instance ID original value given at command line.  */
  const char *resourceInstanceID_help; /**< @brief Resource Instance ID help description.  */
  char * value_arg;	/**< @brief Resource Value (base64 encoded).  */
  char * value_orig;	/**< @brief Resource Value (base64 encoded) original value given at command line.  */
  const char *value_help; /**< @brief Resource Value (base64 encoded) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int objectID_given ;	/**< @brief Whether objectID was given.  */
  unsigned int objectInstanceID_given ;	/**< @brief Whether objectInstanceID was given.  */
  unsigned int resourceID_given ;	/**< @brief Whether resourceID was given.  */
  unsigned int resourceInstanceID_given ;	/**< @brief Whether resourceInstanceID was given.  */
  unsigned int value_given ;	/**< @brief Whether value was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct set_resource_value_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure set_resource_value_args (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure set_resource_value_args (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *set_resource_value_args_purpose;
/** @brief the usage string of the program */
extern const char *set_resource_value_args_usage;
/** @brief the description string of the program */
extern const char *set_resource_value_args_description;
/** @brief all the lines making the help output */
extern const char *set_resource_value_args_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int set_resource_value_parser (int argc, char **argv,
  struct set_resource_value_args *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use set_resource_value_parser_ext() instead
 */
int set_resource_value_parser2 (int argc, char **argv,
  struct set_resource_value_args *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int set_resource_value_parser_ext (int argc, char **argv,
  struct set_resource_value_args *args_info,
  struct set_resource_value_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int set_resource_value_parser_dump(FILE *outfile,
  struct set_resource_value_args *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int set_resource_value_parser_file_save(const char *filename,
  struct set_resource_value_args *args_info);

/**
 * Print the help
 */
void set_resource_value_parser_print_help(void);
/**
 * Print the version
 */
void set_resource_value_parser_print_version(void);

/**
 * Initializes all the fields a set_resource_value_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void set_resource_value_parser_params_init(struct set_resource_value_parser_params *params);

/**
 * Allocates dynamically a set_resource_value_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized set_resource_value_parser_params structure
 */
struct set_resource_value_parser_params *set_resource_value_parser_params_create(void);

/**
 * Initializes the passed set_resource_value_args structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void set_resource_value_parser_init (struct set_resource_value_args *args_info);
/**
 * Deallocates the string fields of the set_resource_value_args structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void set_resource_value_parser_free (struct set_resource_value_args *args_info);

/**
 * The string parser (interprets the passed string as a command line)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int set_resource_value_parser_string (const char *cmdline, struct set_resource_value_args *args_info,
  const char *prog_name);
/**
 * The string parser (version with additional parameters - deprecated)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use set_resource_value_parser_string_ext() instead
 */
int set_resource_value_parser_string2 (const char *cmdline, struct set_resource_value_args *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);
/**
 * The string parser (version with additional parameters)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int set_resource_value_parser_string_ext (const char *cmdline, struct set_resource_value_args *args_info,
  const char *prog_name,
  struct set_resource_value_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int set_resource_value_parser_required (struct set_resource_value_args *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SET_RESOURCE_VALUE_CMDLINE_H */
